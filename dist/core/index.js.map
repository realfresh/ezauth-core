{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/core/index.ts"],"names":[],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\n\nexport class EzAuth {\n\n  errors = {\n    user_already_exists: \"user_already_exists\",\n    user_not_found: \"user_not_found\",\n    user_no_password: \"user_no_password\",\n    user_incorrect_password: \"user_incorrect_password\",\n    user_incorrect_login_type: \"user_incorrect_login_type\",\n    user_login_code_inactive: \"user_login_code_inactive\",\n    user_login_code_incorrect: \"user_login_code_incorrect\",\n    user_login_code_expired: \"user_login_code_expired\",\n    user_login_state_invalid: \"user_login_state_invalid\",\n    user_token_invalid: \"user_token_invalid\",\n    user_password_reset_inactive: \"user_password_reset_inactive\",\n    user_password_reset_incorrect: \"user_password_reset_incorrect\",\n    user_password_reset_expired: \"user_password_reset_expired\",\n    user_incorrect_type: \"user_incorrect_type\",\n    user_verification_inactive: \"user_verification_inactive\",\n    user_verification_incorrect: \"user_verification_incorrect\",\n    user_verification_expired: \"user_verification_expired\",\n    user_verification_incorrect_type: \"user_verification_incorrect_type\",\n  };\n\n  opts: EzAuthOptions;\n\n  constructor(opts: EzAuthOptions) {\n    this.opts = opts;\n  }\n  \n  get db() {\n    return this.opts.db;\n  }\n  \n  register = async (opts: EzAuthRegisterOpts): Promise<EzAuthRegisterResult> => {\n    \n    const existing = await this.db.userFindByLogin(opts.login);\n\n    if (existing) {\n      throw { code: this.errors.user_already_exists };\n    }\n\n    const user: EzAuthUserDB = {\n      _id: this.opts.generateId(),\n      created: Date.now(),\n      type: opts.type,\n      login: opts.login,\n      login_state: this.opts.generateId(),\n      verified: opts.verified || false,\n      login_code: null,\n      login_code_expiry: null,\n      password: null,\n      password_reset_code: null,\n      password_reset_code_expiry: null,\n      verification_code: null,\n      verification_code_expiry: null,\n      profile: opts.profile || {},\n    };\n\n    if (opts.password) {\n      user.password = this.hashPassword(opts.password);\n    }\n\n    if (opts.generateVerificationCode) {\n      user.verification_code = this.opts.generateVerificationCode();\n      user.verification_code_expiry = this.opts.generateVerificationCodeExpiry();\n    }\n\n    await this.db.userInsert(user);\n\n    return {\n      user: user,\n    };\n\n  }\n\n  loginPassword = async ({ login, password }: EzAuthLoginPasswordOpts): Promise<EzAuthLoginPasswordResult> => {\n\n    const user = await this.db.userFindByLogin(login);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    if (!user.password) {\n      throw { code: this.errors.user_no_password };\n    }\n\n    if (!bcrypt.compareSync(password, user.password)) {\n      throw { code: this.errors.user_incorrect_password };\n    }\n\n    const token = this.tokenGenerate(user);\n\n    return {\n      token: token,\n    };\n\n  }\n\n  loginEmailInit = async ({ login }: EzAuthLoginEmailInitOpts): Promise<EzAuthLoginEmailInitResult> => {\n\n    const user = await this.db.userFindByLogin(login);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    if (user.type !== \"email\") {\n      throw { code: this.errors.user_incorrect_login_type };\n    }\n\n    const loginCode = this.opts.generateLoginCode();\n    const loginCodeExpiry = this.opts.generateLoginCodeExpiry();\n\n    await this.db.userUpdateById(user._id, {\n      login_code: loginCode,\n      login_code_expiry: loginCodeExpiry,\n    });\n\n    return {\n      loginCode: loginCode,\n      loginCodeExpiry: loginCodeExpiry,\n    };\n\n  }\n\n  loginEmailComplete = async ({ login, loginCode }: EzAuthLoginEmailCompleteOpts): Promise<EzAuthLoginEmailCompleteResult> => {\n\n    const user = await this.db.userFindByLogin(login);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    if (user.login_code === null) {\n      throw { code: this.errors.user_login_code_inactive };\n    }\n\n    if (user.login_code_expiry === null || Date.now() > user.login_code_expiry) {\n      throw { code: this.errors.user_login_code_expired };\n    }\n\n    if (user.login_code !== loginCode) {\n      throw { code: this.errors.user_login_code_incorrect };\n    }\n\n    await this.db.userUpdateById(user._id, {\n      login_code: null,\n      login_code_expiry: null,\n    });\n\n    const token = this.tokenGenerate(user);\n\n    return {\n      token: token,\n    };\n\n  }\n\n  tokenVerify = async ({ token }: EzAuthTokenVerifyOpts): Promise<EzAuthTokenVerifyResult> => {\n\n    let decoded;\n    try {\n      decoded = this.tokenVerifyBasic(token);\n    }\n    catch (e) {\n      throw { code: this.errors.user_token_invalid };\n    }\n\n    const user = await this.db.userFindById(decoded._id);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    if (user.login_state !== decoded.login_state) {\n      throw { code: this.errors.user_login_state_invalid };\n    }\n\n    return {\n      user: user,\n    };\n\n  }\n\n  tokenRevoke = async ({ login }: EzAuthTokenRevokeOpts): Promise<EzAuthTokenRevokeResult> => {\n\n    await this.db.userUpdateByLogin(login, {\n      login_state: this.opts.generateLoginState(),\n    });\n\n    return { outcome: 0 };\n\n  }\n  \n  resetPasswordInit = async ({ login }: EzAuthPasswordResetInitOpts): Promise<EzAuthPasswordResetInitResult> => {\n\n    const user = await this.db.userFindByLogin(login);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    const passwordResetCode = this.opts.generatePasswordResetCode();\n    const passwordResetCodeExpiry = this.opts.generatePasswordExpiry();\n\n    await this.db.userUpdateById(user._id, {\n      password_reset_code: passwordResetCode,\n      password_reset_code_expiry: passwordResetCodeExpiry,\n    });\n\n    return {\n      passwordResetCode: passwordResetCode,\n      passwordResetCodeExpiry: passwordResetCodeExpiry,\n    };\n\n  }\n\n  resetPasswordComplete = async ({ login, password, passwordResetCode }: EzAuthPasswordResetCompleteOpts): Promise<EzAuthPasswordResetCompleteResult> => {\n\n    const user = await this.db.userFindByLogin(login);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    if (user.password_reset_code === null) {\n      throw { code: this.errors.user_login_code_inactive };\n    }\n\n    if (user.password_reset_code_expiry === null || Date.now() > user.password_reset_code_expiry) {\n      throw { code: this.errors.user_password_reset_expired };\n    }\n\n    if (user.password_reset_code !== passwordResetCode) {\n      throw { code: this.errors.user_password_reset_incorrect };\n    }\n\n    await this.db.userUpdateById(user._id, {\n      password: this.hashPassword(password),\n      password_reset_code: null,\n      password_reset_code_expiry: null,\n    });\n\n    return {\n      outcome: 0,\n    };\n\n  }\n\n  updateLogin = async ({ login, newLogin }: EzAuthUpdateLoginOpts): Promise<EzAuthUpdateLoginResult> => {\n\n    const existing = await this.db.userFindByLogin(newLogin);\n\n    if (existing) {\n      return {\n        outcome: 1,\n        error: this.errors.user_already_exists,\n      };\n    }\n\n    await this.db.userUpdateByLogin(login, {\n      login: newLogin,\n      login_state: this.opts.generateLoginState(),\n    });\n\n    return { outcome: 0 };\n\n  }\n\n  updatePassword = async ({ login, password }: EzAuthUpdatePasswordOpts): Promise<EzAuthUpdatePasswordResult> => {\n\n    await this.db.userUpdateByLogin(login, {\n      password: this.hashPassword(password),\n      login_state: this.opts.generateLoginState(),\n    });\n\n    return {\n      outcome: 0,\n    };\n\n  }\n\n  updateProfile = async ({ login, profile }: EzAuthUpdateProfileOpts): Promise<EzAuthUpdateProfileResult> => {\n\n    const user = await this.db.userFindByLogin(login);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    const newProfile = {\n      ...(user.profile || {}),\n      ...(profile || {}),\n    };\n\n    await this.db.userUpdateByLogin(login, {\n      profile: newProfile,\n    });\n\n    return {\n      profile: newProfile,\n    };\n\n  }\n\n  removeUser =  async ({ login }: EzAuthUserRemoveOpts): Promise<EzAuthUserRemoveResult> => {\n\n    await this.db.userRemove(login);\n\n    return {\n      outcome: 0,\n    };\n\n  }\n\n  emailVerificationInit = async ({ login }: EzAuthEmailVerificationInitOpts): Promise<EzAuthEmailVerificationInitResult> => {\n\n    const user = await this.db.userFindByLogin(login);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    if (user.type !== \"email\") {\n      throw { code: this.errors.user_incorrect_type };\n    }\n\n    const verificationCode = this.opts.generateVerificationCode();\n    const verificationCodeExpiry = this.opts.generateVerificationCodeExpiry();\n\n    await this.db.userUpdateById(user._id, {\n      verification_code: verificationCode,\n      verification_code_expiry: verificationCodeExpiry,\n    });\n\n    return {\n      verificationCode: verificationCode,\n      verificationCodeExpiry: verificationCodeExpiry,\n    };\n\n  }\n\n  emailVerificationComplete = async ({ login, verificationCode }: EzAuthEmailVerificationCompleteOpts): Promise<EzAuthEmailVerificationCompleteResult> => {\n\n    const user = await this.db.userFindByLogin(login);\n\n    if (!user) {\n      throw { code: this.errors.user_not_found };\n    }\n\n    if (user.verification_code === null) {\n      throw { code: this.errors.user_verification_inactive };\n    }\n\n    if (user.verification_code_expiry === null || Date.now() > user.verification_code_expiry) {\n      throw { code: this.errors.user_verification_expired };\n    }\n\n    if (user.verification_code !== verificationCode) {\n      throw { code: this.errors.user_verification_incorrect };\n    }\n\n    await this.db.userUpdateById(user._id, {\n      verified: true,\n      verification_code: null,\n      verification_code_expiry: null,\n    });\n\n    return {\n      outcome: 0,\n    };\n\n  }\n\n  private tokenVerifyBasic = (token: string): EzAuthUser => {\n    return jwt.verify(token, this.opts.tokenSecretKey) as EzAuthUser;\n  }\n\n  private tokenGenerate = (user: EzAuthUserDB) => {\n    this.userMakeSafe(user);\n    return jwt.sign(user, this.opts.tokenSecretKey, {\n      expiresIn: this.opts.tokenExpiry || \"1h\",\n    });\n  }\n\n  private userMakeSafe = (user: EzAuthUserDB): EzAuthUser => {\n    delete user.password;\n    delete user.login_code;\n    delete user.login_code_expiry;\n    return user;\n  }\n\n  private hashPassword = (password: string) => {\n    return bcrypt.hashSync(password, this.opts.passwordSaltRounds || 12);\n  }\n\n}\n"]}