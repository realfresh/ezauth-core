{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../src/tests/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport faker from \"faker\";\nimport nanoid from \"nanoid\";\nimport {Db, MongoClient} from \"mongodb\";\nimport EzAuth, {EzAuthMongoDBAdapter} from \"..\";\n\nrequire(\"dotenv\").config({\n  path: \".env.test\",\n});\n\nconst SECRET_KEY = \"super-secret\";\nconst MONGO_URL = process.env.MONGO_URL;\nconst MONGO_DATABASE = process.env.MONGO_DATABASE;\nconst MONGO_COLLECTION = process.env.MONGO_COLLECTION;\n\ndescribe(\"EZAUTH TESTS\", () => {\n\n  if (!MONGO_URL || !MONGO_DATABASE || !MONGO_COLLECTION) {\n    throw new Error(\"Please supply process.env with MONGO_URL, MONGO_DATABASE, MONGO_COLLECTION\");\n  }\n\n  let connection: MongoClient;\n  let db: Db;\n  let auth: EzAuth;\n\n  beforeAll(async () => {\n\n    connection = await MongoClient.connect(MONGO_URL, {\n      useNewUrlParser: true,\n    });\n    db = await connection.db(MONGO_DATABASE);\n\n    const users = db.collection(MONGO_COLLECTION);\n    await users.deleteMany({});\n    \n    const dbAdapter = await EzAuthMongoDBAdapter({ db, collection: MONGO_COLLECTION });\n\n    auth = new EzAuth({\n      tokenSecretKey: SECRET_KEY,\n      generateId: () => nanoid(),\n      generateLoginState: () => nanoid(),\n      generateLoginCode: () => Math.floor(100000 + Math.random() * 900000).toString(),\n      generateLoginCodeExpiry: () => Date.now() + (1000 * 60 * 10),\n      generatePasswordResetCode: () => nanoid(),\n      generatePasswordExpiry: () => Date.now() + (1000 * 60 * 60),\n      generateVerificationCode: () => nanoid(),\n      generateVerificationCodeExpiry: () => Date.now() + (1000 * 60 * 60),\n      db: dbAdapter,\n    });\n\n  });\n\n  afterAll(async () => {\n    await connection.close();\n  });\n\n  // REGISTRATION\n  it(\"USER REGISTER - NO PASSWORD\", async () => {\n\n    const email = faker.internet.email();\n\n    const { user } = await auth.register({\n      type: \"email\",\n      login: email,\n    });\n\n    expect(typeof user._id).toEqual(\"string\");\n    expect(typeof user.created).toEqual(\"number\");\n    expect(user.type).toEqual(\"email\");\n    expect(user.login).toEqual(email);\n    expect(typeof user.login_state).toEqual(\"string\");\n    expect(user.password).toEqual(null);\n    expect(user.profile).toEqual({});\n\n  });\n  it(\"USER REGISTER - PASSWORD\", async () => {\n\n    const email = faker.internet.email();\n\n    const { user } = await auth.register({\n      type: \"email\",\n      login: email,\n      password: \"123123\",\n    });\n\n    expect(typeof user._id).toEqual(\"string\");\n    expect(typeof user.created).toEqual(\"number\");\n    expect(user.type).toEqual(\"email\");\n    expect(user.login).toEqual(email);\n    expect(typeof user.login_state).toEqual(\"string\");\n    expect(typeof user.password).toEqual(\"string\");\n    expect(user.profile).toEqual({});\n\n  });\n  it(\"USER REGISTER - ALREADY EXISTS\", async () => {\n\n    const email = faker.internet.email();\n\n    await auth.register({\n      type: \"email\",\n      login: email,\n      password: \"123123\",\n    });\n\n    await expect(auth.register({\n      type: \"email\",\n      login: email,\n      password: \"123123\",\n    })).rejects.toEqual({ code: auth.errors.user_already_exists });\n\n  });\n\n  // LOGIN PASSWORD\n  it(\"USER PASSWORD LOGIN - CORRECT\", async () => {\n\n    const email = faker.internet.email();\n\n    await auth.register({\n      type: \"email\",\n      login: email,\n      password: \"123123\",\n    });\n\n    const { token } = await auth.loginPassword({\n      login: email,\n      password: \"123123\",\n    });\n\n    expect(() => {\n      jwt.verify(token, \"wrong-secret\");\n    }).toThrow();\n\n    const { user } = await auth.tokenVerify({ token });\n\n    expect(user.login).toEqual(email);\n\n  });\n  it(\"USER PASSWORD LOGIN - INCORRECT\", async () => {\n\n    const email = faker.internet.email();\n\n    await auth.register({\n      type: \"email\",\n      login: email,\n      password: \"123123\",\n    });\n\n    await expect(auth.loginPassword({\n      login: email,\n      password: \"321321\",\n    })).rejects.toEqual({\n      code: auth.errors.user_incorrect_password,\n    });\n\n  });\n  it(\"USER PASSWORD LOGIN - NO PASSWORD\", async () => {\n\n    const email = faker.internet.email();\n\n    await auth.register({\n      type: \"email\",\n      login: email,\n    });\n\n    await expect(auth.loginPassword({\n      login: email,\n      password: \"321321\",\n    })).rejects.toEqual({\n      code: auth.errors.user_no_password,\n    });\n\n  });\n  it(\"USER PASSWORD LOGIN - DOESNT EXIST\", async () => {\n\n    const email = faker.internet.email();\n\n    await expect(auth.loginPassword({\n      login: email,\n      password: \"321321\",\n    })).rejects.toEqual({\n      code: auth.errors.user_not_found,\n    });\n\n  });\n\n  // LOGIN EMAIL\n  it(\"USER EMAIL LOGIN\", async () => {\n\n    jest.setTimeout(10000);\n\n    const login = \"cpatarun@gmail.com\";\n\n    await auth.register({\n      type: \"email\",\n      login: login,\n    });\n\n    // TEST UNINITIALIZED\n    await expect(auth.loginEmailComplete({ login, loginCode: \"\" })).rejects.toEqual({\n      code: auth.errors.user_login_code_inactive,\n    });\n\n    // INIT LOGIN\n    const { loginCode } = await auth.loginEmailInit({ login });\n\n    // TEST INCORRECT CODE\n    await expect(auth.loginEmailComplete({ login, loginCode: \"\" })).rejects.toEqual({\n      code: auth.errors.user_login_code_incorrect,\n    });\n\n    // TEST CORRECT CODE & VERIFY TOKEN\n    const { token } = await auth.loginEmailComplete({ login, loginCode });\n\n    const { user } = await auth.tokenVerify({ token });\n\n    expect(user.login).toEqual(login);\n\n  });\n  it(\"USER EMAIL LOGIN - WRONG TYPE\", async () => {\n\n    const login = \"+61466986992\";\n\n    await auth.register({\n      type: \"phone\",\n      login: login,\n    });\n\n    await expect(auth.loginEmailInit({ login })).rejects.toEqual({\n      code: auth.errors.user_incorrect_login_type,\n    });\n\n  });\n\n  // EMAIL VERIFICATION\n  it(\"USER EMAIL VERIFICATION\", async () => {\n\n    jest.setTimeout(10000);\n\n    const login = \"cpatarun@gmail.com\";\n\n    // TEST INACTIVE\n    await expect(auth.emailVerificationComplete({\n      login: login,\n      verificationCode: \"123123\",\n    })).rejects.toEqual({\n      code: auth.errors.user_verification_inactive,\n    });\n\n    // INIT RESET\n    const { verificationCode } = await auth.emailVerificationInit({ login });\n\n    // TEST INCORRECT CODE\n    await expect(auth.emailVerificationComplete({\n      login: login,\n      verificationCode: \"123123\",\n    })).rejects.toEqual({\n      code: auth.errors.user_verification_incorrect,\n    });\n\n    // TEST CORRECT CODE & VERIFY CHANGE\n    await auth.emailVerificationComplete({ login, verificationCode });\n\n    const user = await auth.db.userFindByLogin(login);\n\n    expect(user!.verified).toEqual(true);\n\n  });\n\n  // LOGIN REVOKE\n  it(\"USER REVOKE LOGIN\", async () => {\n\n    const login = faker.internet.email();\n\n    await auth.register({\n      type: \"email\",\n      login: login,\n      password: \"123123\",\n    });\n\n    const { token } = await auth.loginPassword({\n      login: login,\n      password: \"123123\",\n    });\n\n    const { user } = await auth.tokenVerify({ token });\n\n    expect(user.login).toEqual(login);\n\n    await auth.tokenRevoke({ login });\n\n    await expect(auth.tokenVerify({ token })).rejects.toEqual({\n      code: auth.errors.user_login_state_invalid,\n    });\n\n  });\n\n  // RESET PASSWORD\n  it(\"USER RESET PASSWORD\", async () => {\n\n    jest.setTimeout(10000);\n\n    const login = faker.internet.email();\n\n    const { user } = await auth.register({\n      type: \"email\",\n      login: login,\n      password: \"123123\",\n    });\n\n    // INIT RESET\n    const { passwordResetCode } = await auth.resetPasswordInit({ login });\n\n    // TEST INCORRECT CODE\n    await expect(auth.resetPasswordComplete({\n      login: login,\n      password: \"123123\",\n      passwordResetCode: \"\",\n    })).rejects.toEqual({\n      code: auth.errors.user_password_reset_incorrect,\n    });\n\n    // TEST CORRECT CODE & VERIFY CHANGE\n    await auth.resetPasswordComplete({\n      login: login,\n      password: \"123123\",\n      passwordResetCode: passwordResetCode,\n    });\n\n    const updatedUser = await auth.db.userFindByLogin(login);\n\n    expect(updatedUser!.password).not.toEqual(user!.password);\n\n  });\n\n  // UPDATES & DELETION\n  it(\"USER UPDATE LOGIN\", async () => {\n\n    const login = faker.internet.email();\n    const newLogin = faker.internet.email();\n    const password = \"123123\";\n\n    await auth.register({\n      type: \"email\",\n      login: login,\n      password: \"123123\",\n    });\n\n    await auth.updateLogin({ login, newLogin });\n\n    const { token } = await auth.loginPassword({\n      login: newLogin,\n      password: password,\n    });\n\n    const { user } = await auth.tokenVerify({ token });\n\n    expect(user.login).toEqual(newLogin);\n\n  });\n  it(\"USER UPDATE PASSWORD\", async () => {\n\n    const login = \"cpatarun@gmail.com\";\n    const password = \"123123\";\n\n    const user = await auth.db.userFindByLogin(login);\n\n    await auth.updatePassword({ login, password });\n\n    const updatedUser = await auth.db.userFindByLogin(login);\n\n    expect(user!.password).not.toEqual(updatedUser!.password);\n    expect(user!.login_state).not.toEqual(updatedUser!.login_state);\n\n  });\n  it(\"USER UPDATE PROFILE\", async () => {\n\n    const login = \"cpatarun@gmail.com\";\n\n    const profile = {\n      organisation_id: nanoid(),\n    };\n\n    const user = await auth.db.userFindByLogin(login);\n\n    await auth.updateProfile({ login, profile });\n\n    const updatedUser = await auth.db.userFindByLogin(login);\n\n    expect(updatedUser!.profile).toEqual(profile);\n    expect(user!.profile).not.toEqual(updatedUser!.profile);\n\n  });\n  it(\"USER REMOVE\", async () => {\n\n    const login = faker.internet.email();\n\n    await auth.register({\n      type: \"email\",\n      login: login,\n    });\n\n    await auth.removeUser({ login });\n\n    const user = await auth.db.userFindByLogin(login);\n\n    expect(user).toEqual(null);\n\n  });\n\n});\n"]}